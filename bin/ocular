#!/usr/bin/ruby

require 'ocular'
require 'optparse'
require 'ostruct'
require 'pp'


class OptparseExample

  #
  # Return a structure describing the options.
  #
  def self.parse(args)
    # The options specified on the command line will be collected in *options*.
    # We set default values here.
    options = OpenStruct.new
    options.library = []
    options.inplace = false
    options.encoding = "utf8"
    options.transfer_type = :auto
    options.verbose = false
    options.server = false
    options.settings = nil
    options.root = nil

    opt_parser = OptionParser.new do |opts|
      opts.banner = "Usage in shell mode: \"ocular [options] <script file>\" or server mode: \"ocular --server [options]\""

      opts.separator ""
      opts.separator "Specific options:"


      opts.separator ""
      opts.separator "Common options:"

      # No argument, shows at tail.  This will print an options summary.
      # Try it and see!
      opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
      end

      # Another typical switch to print the version.
      opts.on_tail("--version", "Show version") do
        puts Ocular::Version
        exit
      end

      opts.on("--server", "Start in server mode") do
        options.server = true
      end

      opts.on("--root PATH", "Script root path") do |path|
        options.root = path
      end

      opts.on("--settings FILE", "Full path and file name to the settings yaml file.") do |path|
        options.settings = path
      end

    end

    opt_parser.parse!(args)
    options
  end  # parse()

end  # class OptparseExample

options = OptparseExample.parse(ARGV)

Ocular::Settings.load_from_file(Ocular::Settings.find_settings_file_from_system(options.settings))

if options.server
  if !options.root && !Ocular::Settings.get(:script_root)
    puts "Please specify --root or set script_root in the settings.yaml"
    exit
  end

  daemon = Ocular::Daemon.new(options.root || Ocular::Settings.get(:script_root))
  daemon.load_script_files()
  daemon.start_input_handlers()

  puts "server started"
  daemon.wait()

else
  # Start shell mode

  if ARGV.length == 0
      puts "Missing script file to run. use -h to get more info"
      exit
  end

  ef = Ocular::Event::EventFactory.new
  proxy = ef.load_from_file(ARGV.shift)

  context = Ocular::DSL::RunContext.new
  eventbase = proxy.events["onEvent"][nil]
  eventbase.exec(context)

end
