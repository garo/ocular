#!/usr/bin/ruby

require 'ocular'
require 'optparse'
require 'ostruct'
require 'pp'


class OptparseExample

  #
  # Return a structure describing the options.
  #
  def self.parse(args)
    # The options specified on the command line will be collected in *options*.
    # We set default values here.
    options = OpenStruct.new
    options.library = []
    options.inplace = false
    options.encoding = "utf8"
    options.transfer_type = :auto
    options.verbose = false
    options.server = false
    options.settings = nil
    options.root = nil

    opt_parser = OptionParser.new do |opts|
      opts.banner = "Usage in shell mode: \"ocular [options] <script file>\" or server mode: \"ocular --server [options]\""

      opts.separator ""
      opts.separator "Specific options:"


      opts.separator ""
      opts.separator "Common options:"

      # No argument, shows at tail.  This will print an options summary.
      # Try it and see!
      opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
      end

      # Another typical switch to print the version.
      opts.on_tail("--version", "Show version") do
        puts Ocular::Version
        exit
      end

      opts.on("--server", "Start in server mode") do
        options.server = true
      end

      opts.on("--root PATH", "Script root path") do |path|
        options.root = path
      end

      opts.on("--settings FILE", "Full path and file name to the settings yaml file.") do |path|
        options.settings = path
      end

    end

    opt_parser.parse!(args)
    options
  end  # parse()

end  # class OptparseExample

options = OptparseExample.parse(ARGV)

begin
  Ocular::Settings.load_from_file(Ocular::Settings.find_settings_file_from_system(options.settings))
rescue Errno::ENOENT
  puts "Could not find #{options.settings} in any search path."
  puts "Please create a yaml settings file in either ~/.ocular.yaml or /etc/ocular.yaml"
  puts "Here's an example file:\n"
  puts "
aws:
  aws_access_key_id: AKI...
  aws_secret_access_key: ....
ssh:
  keys:
  - /home/user/.ssh/id_dsa
  user: ubuntu

inputs:
  http:
    port: 8083
  etcd:
    host: etc
    port: 4001

"
  exit -1
end

if options.server
  if !options.root && !Ocular::Settings.get(:script_root)
    puts "Please specify --root or set script_root in the settings.yaml"
    exit
  end

  daemon = Ocular::Daemon.new(options.root || Ocular::Settings.get(:script_root))
  daemon.load_script_files()
  daemon.start_input_handlers()

  puts "server started"
  daemon.wait()

else
  # Start shell mode

  if ARGV.length == 0
      puts "Missing script file to run, starting ocular interactive shell. use \"orbit -h\" to get full options"
      puts ""
      longest_name = $dsl_help.keys.max_by(&:length).length
      $dsl_help.each do |cmd, help|
        spacing = " "*(longest_name.to_i+1-cmd.length)
        puts "  #{cmd}#{spacing}#{help}"
      end
      puts ""

      ARGV.clear
      require 'irb'
      IRB.setup nil

      IRB.conf[:PROMPT] = {}
      IRB.conf[:IRB_NAME] = 'ocular'
      IRB.conf[:PROMPT][:MY_PROJECT] = {
        :PROMPT_I => '%N:%03n:%i> ',
        :PROMPT_N => '%N:%03n:%i> ',
        :PROMPT_S => '%N:%03n:%i%l ',
        :PROMPT_C => '%N:%03n:%i* ',
        :RETURN => "# => %s\n"
      }
      IRB.conf[:PROMPT_MODE] = :MY_PROJECT

      IRB.conf[:RC] = false
      IRB.conf[:AUTO_INDENT] = true
      require 'irb/completion'
      require 'irb/ext/save-history'
      IRB.conf[:READLINE] = true
      IRB.conf[:SAVE_HISTORY] = 1000
      IRB.conf[:HISTORY_FILE] = '~/.ocular_history'

      context = Ocular::DSL::RunContext.new

      irb = IRB::Irb.new(IRB::WorkSpace.new(context))
      IRB.conf[:MAIN_CONTEXT] = irb.context

      trap("SIGINT") do
        IRB.irb.signal_handle
      end

      begin
        catch(:IRB_EXIT) do
          irb.eval_input
        end
      ensure
        IRB.irb_at_exit
      end

      exit
  end

  ef = Ocular::Event::EventFactory.new
  proxy = ef.load_from_file(ARGV.shift)

  context = Ocular::DSL::RunContext.new
  eventbase = proxy.events["onEvent"]["cli"]
  eventbase.exec(context)

end
